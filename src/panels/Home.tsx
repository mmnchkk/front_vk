import { FC, useState, useEffect } from "react";
import {
  Panel,
  Button,
  Div,
  Title,
  Slider,
  Input,
  Checkbox,
  FormItem,
  Select,
  Card,
  CardGrid,
} from "@vkontakte/vkui";
import { lightFormat } from "date-fns";
import { Icon16CalendarOutline } from "@vkontakte/icons";
import { fetchEmotions } from "../service/emotionService"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º addEmotionFx
import "./style.css";
import { addEmotionFx } from "../store/emotionsStore";

export interface HomeProps {
  id: string;
}

export const Home: FC<HomeProps> = ({ id }) => {
  const emojis = ["üò≠", "üò¢", "üòî", "üò∂", "üôÇ", "üòä", "üòÅ"];
  const [sliderValue, setSliderValue] = useState(50);
  const [value, setValue] = useState(() => new Date());
  const [selectedReason, setSelectedReason] = useState("–û—Ç–Ω–æ—à–µ–Ω–∏—è");
  const [notes, setNotes] = useState("");
  const [feelings, setFeelings] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [emotions, setEmotions] = useState<any[]>([]); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–π

  // –ó–∞–≥—Ä—É–∑–∫–∞ —ç–º–æ—Ü–∏–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const loadEmotions = async () => {
      const fetchedEmotions = await fetchEmotions();
      setEmotions(fetchedEmotions);
    };
    loadEmotions();
  }, []);

  const getEmojiIndex = (value: number) => {
    const maxIndex = emojis.length - 1;
    const index = Math.round((value / 100) * maxIndex);
    return Math.min(Math.max(index, 0), maxIndex);
  };
  const [currentView, setCurrentView] = useState<any>(1);
  const handleNextClick = (view: any) => {
    setCurrentView(view); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
  };

  const handleSubmit = async () => {
    setIsLoading(true);
    try {
      const mood = emojis[getEmojiIndex(sliderValue)];
      await addEmotionFx({
        mood,
        reason: selectedReason,
        notes,
        feelings: feelings.join(", "),
        date: new Date(), // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö", error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Panel id={id}>
      <Div className="home-wrap">
        <Div className="home">
          <Title className="home-date">
            <Icon16CalendarOutline />
            –°–µ–≥–æ–¥–Ω—è {lightFormat(value, "dd.MM.yyyy, HH:mm")}
          </Title>

          {currentView === 1 && (
            <div className="first-part">
              <Title className="title" style={{textAlign: "center"}}>–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ?</Title>
              <Title className="home-emoji" style={{ fontSize: 100 }}>
                {emojis[getEmojiIndex(sliderValue)]}
              </Title>
              <Slider
                value={sliderValue}
                onChange={(val: number) => setSliderValue(val)}
                min={0}
                max={100}
                step={1}
                className="slider"
              />
              <Button
                stretched
                size="l"
                mode="outline"
                onClick={() => {
                  handleNextClick(2);
                }}
              >
                –î–∞–ª–µ–µ
              </Button>
            </div>
          )}
          {currentView === 2 && (
            // –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å: —Ñ–æ—Ä–º–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–∏—á–∏–Ω—ã, –∑–∞–º–µ—Ç–∫–∞–º–∏ –∏ —á—É–≤—Å—Ç–≤–∞–º–∏
            <div className="second-part">
              <CardGrid size="l" spaced>
                <Card mode="shadow">
                  <FormItem
                    top="–ß—Ç–æ –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?"
                    htmlFor="reason-select"
                  >
                    <Select
                      id="reason-select"
                      value={selectedReason}
                      onChange={(e) => setSelectedReason(e.target.value)}
                      options={[
                        { label: "–û—Ç–Ω–æ—à–µ–Ω–∏—è", value: "–û—Ç–Ω–æ—à–µ–Ω–∏—è" },
                        { label: "–£—á–µ–±–∞", value: "–£—á–µ–±–∞" },
                        { label: "–î—Ä—É–∑—å—è", value: "–î—Ä—É–∑—å—è" },
                        { label: "–†–∞–±–æ—Ç–∞", value: "–†–∞–±–æ—Ç–∞" },
                        { label: "–°–µ–º—å—è", value: "–°–µ–º—å—è" },
                        { label: "–ü–æ–≥–æ–¥–∞", value: "–ü–æ–≥–æ–¥–∞" },
                        { label: "–•–æ–±–±–∏", value: "–•–æ–±–±–∏" },
                        { label: "–£–±–æ—Ä–∫–∞", value: "–£–±–æ—Ä–∫–∞" },
                        { label: "–î–æ—Å—É–≥", value: "–î–æ—Å—É–≥" },
                        { label: "–í—Å–µ –±–µ—Å–∏—Ç", value: "–í—Å–µ –±–µ—Å–∏—Ç" },
                      ]}
                    />
                  </FormItem>
                  <FormItem top="–ó–∞–º–µ—Ç–∫–∏" htmlFor="notes-input">
                    <Input
                      id="notes-input"
                      type="text"
                      value={notes}
                      onChange={(e) => setNotes(e.target.value)}
                    />
                  </FormItem>
                  <FormItem top="–ö–∞–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –º–æ–∂–Ω–æ –æ–ø–∏—Å–∞—Ç—å –≤–∞—à–∏ —á—É–≤—Å—Ç–≤–∞?">
                    <div className="feelings">
                      <div>
                        <Checkbox
                          onChange={() => {
                            const index = feelings.indexOf("–¢—Ä–µ–≤–æ–≥–∞");
                            if (index > -1) {
                              setFeelings((prev) => prev.slice(0, index).concat(prev.slice(index + 1)));
                            } else {
                              setFeelings((prev) => [...prev, "–¢—Ä–µ–≤–æ–≥–∞"]);
                            }
                          }}
                        >
                          –¢—Ä–µ–≤–æ–≥–∞
                        </Checkbox>
                        <Checkbox
                          onChange={() => {
                            const index = feelings.indexOf("–°—á–∞—Å—Ç—å–µ");
                            if (index > -1) {
                              setFeelings((prev) => prev.slice(0, index).concat(prev.slice(index + 1)));
                            } else {
                              setFeelings((prev) => [...prev, "–°—á–∞—Å—Ç—å–µ"]);
                            }
                          }}
                        >
                          –°—á–∞—Å—Ç—å–µ
                        </Checkbox>
                        <Checkbox
                          onChange={() => {
                            const index = feelings.indexOf("–ê–≥—Ä–µ—Å—Å–∏—è");
                            if (index > -1) {
                              setFeelings((prev) => prev.slice(0, index).concat(prev.slice(index + 1)));
                            } else {
                              setFeelings((prev) => [...prev, "–ê–≥—Ä–µ—Å—Å–∏—è"]);
                            }
                          }}
                        >
                          –ê–≥—Ä–µ—Å—Å–∏—è
                        </Checkbox>
                        <Checkbox
                          onChange={() => {
                            const index = feelings.indexOf("–ê–ø–∞—Ç–∏—è");
                            if (index > -1) {
                              setFeelings((prev) => prev.slice(0, index).concat(prev.slice(index + 1)));
                            } else {
                              setFeelings((prev) => [...prev, "–ê–ø–∞—Ç–∏—è"]);
                            }
                          }}
                        >
                          –ê–ø–∞—Ç–∏—è
                        </Checkbox>
                      </div>
                      <div>
                        <Checkbox
                          onChange={() => {
                            const index = feelings.indexOf("–£–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ");
                            if (index > -1) {
                              setFeelings((prev) => prev.slice(0, index).concat(prev.slice(index + 1)));
                            } else {
                              setFeelings((prev) => [...prev, "–£–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ"]);
                            }
                          }}
                        >
                          –£–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ
                        </Checkbox>
                        <Checkbox
                          onChange={() => {
                            const index = feelings.indexOf("–î–µ–ø—Ä–µ—Å—Å–∏—è");
                            if (index > -1) {
                              setFeelings((prev) => prev.slice(0, index).concat(prev.slice(index + 1)));
                            } else {
                              setFeelings((prev) => [...prev, "–î–µ–ø—Ä–µ—Å—Å–∏—è"]);
                            }
                          }}
                        >
                          –î–µ–ø—Ä–µ—Å—Å–∏—è
                        </Checkbox>
                        <Checkbox
                          onChange={() => {
                            const index = feelings.indexOf("–ö–∞–π—Ñ");
                            if (index > -1) {
                              setFeelings((prev) => prev.slice(0, index).concat(prev.slice(index + 1)));
                            } else {
                              setFeelings((prev) => [...prev, "–ö–∞–π—Ñ"]);
                            }
                          }}
                        >
                          –ö–∞–π—Ñ
                        </Checkbox>
                        <Checkbox
                          onChange={() => {
                            const index = feelings.indexOf("–≠–π—Ñ–æ—Ä–∏—è");
                            if (index > -1) {
                              setFeelings((prev) => prev.slice(0, index).concat(prev.slice(index + 1)));
                            } else {
                              setFeelings((prev) => [...prev, "–≠–π—Ñ–æ—Ä–∏—è"]);
                            }
                          }}
                        >
                          –≠–π—Ñ–æ—Ä–∏—è
                        </Checkbox>
                      </div>
                    </div>
                  </FormItem>
                  <Button
                    stretched
                    size="l"
                    mode="outline"
                    onClick={() => {
                      handleSubmit(), handleNextClick(3);
                    }}
                    loading={isLoading}
                    style={{ margin: 20, width: 300 }}
                  >
                    –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                  </Button>
                </Card>
              </CardGrid>
            </div>
          )}
          {currentView === 3 && (
            <div className="first-part">
              <Title className="title-3" style={{textAlign: "center"}}>
                –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Å–≤–æ–∏–º–∏ —ç–º–æ—Ü—è–º–∏!
              </Title>
              <p className="desc-3">–ú–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.</p>
              <Button
                stretched
                size="l"
                mode="outline"
                onClick={() => {
                  handleNextClick(1);
                }}
              >
                –ù–∞ –≥–ª–∞–≤–Ω—É—é
              </Button>
            </div>
          )}
        </Div>
      </Div>
    </Panel>
  );
};
